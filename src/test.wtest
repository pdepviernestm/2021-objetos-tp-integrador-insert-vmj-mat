import ataques.*
import enemigo.*
import wollok.game.*
import menu.*
import personaje.*
import turnos.*
import batalla.*
import tocadiscos.*


test "un personaje esta muerto si sus puntos HP son = 0" {
	const personaje = new Personaje(atributos = new Atributos(maxHP = 0))
	assert.that(personaje.estaMuerto())
	
}
test "el enemigo está muerto si sus puntos HP son = 0" {
	const enemigo = new Personaje(atributos = new AtributosEnemigo(maxHP = 0))	
	assert.that(enemigo.estaMuerto())
}	
 
test "puntos del personaje si recibe un ataque fisico del enemigo" {
	//tocadiscos.tocar(sonidoMagia)
	const personaje = new Personaje(atributos = new Atributos(icono = new Icono(position = game.at(16, 2),image = "personajes/Thief2M.gif"),imagenInicial = "personajes/Thief2M-SW.gif",imagenAtaque = "personajes/Thief2M-Weak-SW.gif",imagenMuerto = "personajes/Thief2M-Dead-SW.gif",
						posicionOriginal = game.at(5, 8),maxHP = 100,vida = new Hp(hpInicial = 100, position = game.at(14, 2)),fuerza = 70,vigor = 70,intelecto = 25, mente = 30,habilidades = [ataqueFisico]),text="ladron", position = game.at(4,2))
	const personaje2 = new Personaje(atributos = new Atributos(icono = new Icono(position = game.at(16, 4),image = "personajes/WhiteMage2F.gif"),imagenInicial = "personajes/WhiteMage2F-SW.gif",imagenAtaque =  "personajes/WhiteMage2F-Weak-SW.gif",imagenMuerto =  "personajes/WhiteMage2F-Dead-SW.gif",
		posicionOriginal = game.at(5, 6),maxHP = 120, vida = new Hp(hpInicial = 120,position= game.at(14,4)),fuerza = 20,vigor = 30,intelecto = 70,mente = 70,habilidades = [curacion, ataqueMagico, hechizoLazaro]),text="Clerigo",position = game.at(4, 1))
	ataqueFisico.tipoHabilidad().realizar(personaje2, personaje) 
	assert.equals(90, personaje.fuerza())
	}

test "puntos del personaje si recibe un ataque mágico del enemigo" {
	//tocadiscos.tocar(sonidoMagia)
	const personaje = new Personaje(atributos = new Atributos(mente = 30, maxHP = 100))
	const personaje2 = new Personaje(atributos = new Atributos(intelecto = 20))
	ataqueMagico.tipoHabilidad().realizar(personaje2, personaje)
	assert.equals(70, personaje.hp())
	}

test "si la carga es menor a 3, el enemigo elige un ataque físico" {
	cactrot.atributos().carga(2) 
	assert.equals(ataqueFisico.tipoHabilidad(), cactrot.elegirAtaque())
}

test "si la carga no es menor a 3, el enemigo elige un ataque mágico" {
	cactrot.atributos().carga(3) 
	assert.equals(ataqueMagico.tipoHabilidad(), cactrot.elegirAtaque())	
}
/* test "si un personaje cura a otro, los HP del curado no superan los HP máximos" {
	const personaje = new Personaje(atributos = new Atributos(mente = 60))
	const personaje2 = new Personaje(atributos = new Atributos(maxHP = 40))
	personaje2.reducirHP(30)
	//curacion.tipoHabilidad().realizar(clerigo, personaje2)
	personaje2.recibirHabilidad(curacion.tipoHabilidad(),100)
	assert.equals(40, personaje2.hp())
}*/

test "si un personaje es curado, los HP no superan los HP máximos" {
	const personaje = new Personaje(atributos = new Atributos(maxHP = 40))
	personaje.reducirHP(30)
	personaje.recibirHabilidad(curacion.tipoHabilidad(),100)
	assert.equals(40, personaje.hp())

 test "al iniciar una batalla, al objeto turno se le transfieren las propiedades de ésta" {
	const batallaDeEjemplo = new Batalla(enemigos = [cactrot], heroes = [clerigo, ladron],
	image = "menu/Game Boy Advance - Final Fantasy 1 Dawn of Souls - Font and Menu - Copy (2).png", 
	nombre = "", image = "", proximaAccion = "")
	batallaDeEjemplo.iniciar()
	assert.equals(batallaDeEjemplo, turno.batalla())
	assert.equals([cactrot], turno.enemigos())
	assert.equals([clerigo, ladron], turno.heroes())
}


test "el método heroesVivos retorna los héroes que están vivos en cierto momento" {
	turno.heroes([ladron, clerigo])
	ladron.atributos().hp(0)
	assert.equals([clerigo], turno.heroesVivos())
}

test "el método enemigosVivos retorna los enemigos que están vivos en cierto momento" {
	turno.enemigos([cactrot, duende, tomberi])
	duende.atributos().hp(0)
	assert.equals([cactrot, tomberi], turno.enemigosVivos())
}

test "el método encontrarActual retorna el índice en la lista de héroes en que se encuentra el activo" {
	turno.heroes([ladron, clerigo])
	turno.heroeActivo(clerigo)
	assert.equals(1, turno.encontrarActual())
}

test "el método siguienteVivo retorna el próximo héroe con vida, comenzando desde cierto punto" {
	turno.heroes([ladron, clerigo, hercules, poseidon])
	clerigo.atributos().hp(0)
	assert.equals(hercules, turno.siguienteVivo(0))
}