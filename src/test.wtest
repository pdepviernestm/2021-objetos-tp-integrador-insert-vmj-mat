import ataques.*
import enemigo.*
import wollok.game.*
import menu.*
import personaje.*
import turnos.*
import batalla.*
import tocadiscos.*


test "un heroe esta muerto si sus puntos HP son = 0" {
	assert.equals(120,hercules.hp())
	hercules.reducirHP(120)	
	assert.that(hercules.estaMuerto())	
}
test "el enemigo está muerto si sus puntos HP son = 0" {
	assert.equals(170,duende.hp())
	duende.reducirHP(170)	
	assert.that(duende.estaMuerto())
}	
 

test "si un enemigo recibe un ataque, a la potencia se le restan los atributos de defensa del enemigo"{
	assert.equals(170,duende.hp())
	duende.recibirHabilidad(ataqueEspada.tipoHabilidad(),80)
	assert.equals(50,duende.vigor())
	assert.equals(140,duende.hp())
}

test "si un personaje recibe un ataque, a la potencia se le restan los atributos de defensa del personaje"{
	assert.equals(120,hercules.hp())
	hercules.recibirHabilidad(ataqueEspada.tipoHabilidad(),150)
	assert.equals(50,hercules.vigor())
	assert.equals(20,hercules.hp())
}

test "si un personaje recibe un ataque con potencia menor a sus atributos, la potencia del impacto es la inicial del ataque"{
	assert.equals(120,hercules.hp())
	hercules.recibirHabilidad(ataqueEspada.tipoHabilidad(),40)
	assert.equals(50,hercules.vigor())
	assert.equals(30,ataqueEspada.tipoHabilidad().potenciaInicial())
	assert.equals(90,hercules.hp())
}

test "si un enemigo recibe un ataque con potencia menor a sus atributos, la potencia del impacto es la inicial del ataque"{
	assert.equals(170,duende.hp())
	duende.recibirHabilidad(ataqueEspada.tipoHabilidad(),20)
	assert.equals(50,duende.vigor())
	assert.equals(30,ataqueEspada.tipoHabilidad().potenciaInicial())
	assert.equals(140,duende.hp())
}


test "si un personaje es curado, los HP no superan los HP máximos" {
	assert.equals(100,ladron.maxHP())
	ladron.reducirHP(5)
	ladron.recibirHabilidad(curacion.tipoHabilidad(),100)
	assert.equals(100, ladron.hp())}


test "el método heroesVivos retorna los héroes que están vivos en cierto momento" {
	turno.heroes([ladron, clerigo])
	ladron.atributos().hp(0)
	assert.equals([clerigo], turno.heroesVivos())
}

test "el método enemigosVivos retorna los enemigos que están vivos en cierto momento" {
	turno.enemigos([cactrot, duende, tomberi])
	duende.atributos().hp(0)
	assert.equals([cactrot, tomberi], turno.enemigosVivos())
}

test "el método encontrarActual retorna el índice en la lista de héroes en que se encuentra el activo" {
	turno.heroes([ladron, clerigo])
	turno.heroeActivo(clerigo)
	assert.equals(1, turno.encontrarActual())
}

test "el método siguienteVivo retorna el próximo héroe con vida, comenzando desde cierto punto" {
	turno.heroes([ladron, clerigo, hercules, poseidon])
	clerigo.atributos().hp(0)
	assert.equals(hercules, turno.siguienteVivo(0))
}

test "si la forma de elegir el ataque es ciclando, el enemigo elige sus ataques de su lista ciclicamente"{
	var primerAtaque = shiva.elegirAtaque()
	assert.equals(ataqueHielo.tipoHabilidad(),primerAtaque)
	var segundoAtaque = shiva.elegirAtaque()
	assert.equals(ataqueAero.tipoHabilidad(),segundoAtaque)
}

test "si la forma de elegir ataque es por carga, el enemigo acumula la carga hasta lanzar el ataque cargado y se vuelve a restear"{
	assert.equals(0,dragoncito.atributos().formaDeElegirAtaque().carga())
	var ataque = dragoncito.elegirAtaque()
	assert.equals(1,dragoncito.atributos().formaDeElegirAtaque().carga())
	ataque = dragoncito.elegirAtaque()
	assert.equals(ataqueFisico.tipoHabilidad(),ataque)
	assert.equals(2,dragoncito.atributos().formaDeElegirAtaque().carga())
	ataque = dragoncito.elegirAtaque()
	assert.equals(ataquePiro.tipoHabilidad(),ataque)
	assert.equals(0,dragoncito.atributos().formaDeElegirAtaque().carga())
}


